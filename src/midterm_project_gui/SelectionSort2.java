/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package midterm_project_gui;
import java.util.ArrayList;
import java.util.Comparator;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Jimuel
 */
public class SelectionSort2 extends javax.swing.JFrame {

    /**
     * Creates new form SelectionSort2
     */
    public SelectionSort2() {
        initComponents();
    }
    
    public SelectionSort2(String input, ArrayList<Object[]> results) {
        initComponents();
        this.User_Sort_Input.setText(input);
        switch (User_Sort_Input.getText()) {
            case "a", "A" -> this.Sort_Condition_Input.setText("Product Name");
            case "b", "B" -> this.Sort_Condition_Input.setText("Weight (Highest to Lowest)");
            default -> this.Sort_Condition_Input.setText("Amount (Highest to Lowest)");
        }
        
        // Now sort the results based on the input
        sortResults(results, User_Sort_Input.getText());

        // Update the JTable with sorted results
        updateTable(results);        
    }
    
    private void sortResults(ArrayList<Object[]> results, String input) {
        // Your comparator logic will change based on the input
        Comparator<Object[]> comparator = null;

        switch (input.toUpperCase()) {
            case "A" -> // Sort by Product Name
                comparator = (o1, o2) -> ((String) o1[0]).compareToIgnoreCase((String) o2[0]);
            case "B" -> // Sort by Weight (Descending)
                comparator = (o1, o2) -> Double.compare((Double) o2[1], (Double) o1[1]);
            case "C" -> // Sort by Amount (Descending)
                comparator = (o1, o2) -> Integer.compare((Integer) o2[2], (Integer) o1[2]);
        }

        // Selection sort algorithm 
        if (comparator != null) {
            for (int i = 0; i < results.size() - 1; i++) {
                int min = i;
                for (int j = i + 1; j < results.size(); j++) {
                    if (comparator.compare(results.get(j), results.get(min)) < 0) {
                        min = j;
                    }
                }
                // Swap if min has changed
                if (min != i) {
                    Object[] temp = results.get(i);
                    results.set(i, results.get(min));
                    results.set(min, temp);
                }
            }
        }
    }
    
    private void updateTable(ArrayList<Object[]> sortedResults) {
        DefaultTableModel model = (DefaultTableModel) Result_Table.getModel();
        model.setRowCount(0); // Clears the table

        for (Object[] row : sortedResults) {
            model.addRow(row); // Adds the sorted rows back to the table
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Result_Scroll_Pane = new javax.swing.JScrollPane();
        Result_Table = new javax.swing.JTable();
        Sort_Input_Label = new javax.swing.JLabel();
        User_Sort_Input = new javax.swing.JLabel();
        Sort_Condition_Label = new javax.swing.JLabel();
        Sort_Condition_Input = new javax.swing.JLabel();
        Proceed_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Midterm  Project");

        Result_Scroll_Pane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Result_Scroll_Pane.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        Result_Table.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        Result_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product Name", "Weight/Box", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Result_Scroll_Pane.setViewportView(Result_Table);

        Sort_Input_Label.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Sort_Input_Label.setText("Given answer:");

        User_Sort_Input.setText("Sort");

        Sort_Condition_Label.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Sort_Condition_Label.setText("Sorted by: ");

        Sort_Condition_Input.setText("Sort Condition");

        Proceed_Button.setText("Proceed");
        Proceed_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Proceed_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Proceed_Button)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Sort_Condition_Label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Sort_Condition_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Sort_Input_Label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(User_Sort_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(Result_Scroll_Pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Sort_Input_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(User_Sort_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Sort_Condition_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Sort_Condition_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Result_Scroll_Pane, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(Proceed_Button)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Proceed_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Proceed_ButtonActionPerformed
        
        Delivery1 deliveryWindow = new Delivery1();
        deliveryWindow.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_Proceed_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectionSort2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectionSort2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectionSort2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectionSort2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelectionSort2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Proceed_Button;
    private javax.swing.JScrollPane Result_Scroll_Pane;
    private javax.swing.JTable Result_Table;
    private javax.swing.JLabel Sort_Condition_Input;
    private javax.swing.JLabel Sort_Condition_Label;
    private javax.swing.JLabel Sort_Input_Label;
    private javax.swing.JLabel User_Sort_Input;
    // End of variables declaration//GEN-END:variables
}
